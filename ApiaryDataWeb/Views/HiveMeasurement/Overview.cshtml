@model IEnumerable<ApiaryDataCollector.Models.HiveMeasurement>

@{
    var apiaries = (IEnumerable<Apiary>)ViewData["Apiaries"];
    var selectedApiaryId = ViewData["SelectedApiaryId"] as int?;
    var hives = (IEnumerable<Hive>)ViewData["Hives"];
    var selectedHives = ViewData["SelectedHives"] as int[] ?? Array.Empty<int>();
    var selectedDateRange = ViewData["SelectedDateRange"] as string ?? "Last24h";

    var chartData = ViewBag.ChartData ?? "[]";
}

<h1>Hives Overview</h1>

<form method="get" action="/HiveMeasurement/Overview" style="display: flex; justify-content: space-between; gap: 20px;">
    <!-- Levá část: Výběr Apiary -->
    <div style ="flex: 1;">
        <label for="apiary">Apiary:</label>
        <select id="apiary" name="apiaryId" onchange="this.form.submit()">
            <option value="">-- Select Apiary --</option>
            @foreach (var apiary in apiaries)
            {
                if (apiary.ApiaryNumber == selectedApiaryId)
                {
                    <option value="@apiary.ApiaryNumber" selected="selected">@apiary.Name</option>
                }
                else
                {
                    <option value="@apiary.ApiaryNumber">@apiary.Name</option>
                }

            }
        </select>
    </div>

    <!-- Prostřední část: Výběr Hives -->
    <div style="flex: 2;">
        <label>Hives to include:</label>
        <div id="hive-checkboxes" style="display: flex; flex-wrap: wrap; gap: 10px;">
            @if (hives != null && hives.Any())
            {
                @foreach (var hive in hives)
                {
                    <div>
                        <input type="checkbox" id="hive-@hive.HiveNumber" name="selectedHives" value="@hive.HiveNumber"
                        @(selectedHives.Contains(hive.HiveNumber) ? "checked" : "") onchange="this.form.submit()">
                        <label for="hive-@hive.HiveNumber">Hive #@hive.HiveNumber</label>
                    </div>
                }
            }
            else
            {
                <p>Select an apiary to see available hives.</p>
            }
        </div>
    </div>


    <!-- Pravá část: Výběr Date Range -->
    <div style="flex: 1;">
        <label>Date Range:</label>
        <div style="display: flex; flex-direction: column; gap: 5px;">
            <div>
                <input type="radio" id="last24h" name="selectedDateRange" value="Last24h"
                @(selectedDateRange == "Last24h" ? "checked" : "") onchange="this.form.submit()">
                <label for="last24h">Last 24h</label>
            </div>
            <div>
                <input type="radio" id="last7days" name="selectedDateRange" value="Last7Days"
                @(selectedDateRange == "Last7Days" ? "checked" : "") onchange="this.form.submit()">
                <label for="last7days">Last 7 days</label>
            </div>
            <div>
                <input type="radio" id="last30days" name="selectedDateRange" value="Last30Days"
                @(selectedDateRange == "Last30Days" ? "checked" : "") onchange="this.form.submit()">
                <label for="last30days">Last 30 days</label>
            </div>
            <div>
                <input type="radio" id="all" name="selectedDateRange" value="All"
                @(selectedDateRange == "All" ? "checked" : "") onchange="this.form.submit()">
                <label for="all">All</label>
            </div>
        </div>
    </div>


</form>

<div style="width: 800px; height: 600px;">
<!-- Vygenerování grafů -->
<div id="charts-container" >
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon"></script>
    <script>
        const rawChartData = @Html.Raw(chartData);

        const chartsContainer = document.getElementById('charts-container');

        rawChartData.forEach(hive => {
            // Vytvoření div kontejneru pro jeden graf
            const container = document.createElement('div');
            container.style.marginBottom = '50px';

            // Přidání nadpisu s názvem Hive
            const heading = document.createElement('h2');
            heading.textContent = `Hive #${hive.HiveNumber}`;
            container.appendChild(heading);

            // Vytvoření canvas pro graf
            const canvas = document.createElement('canvas');
            canvas.width = 400;
            canvas.height = 200;

            container.appendChild(canvas);
            chartsContainer.appendChild(container);

            // Vykreslení grafu pomocí Chart.js
            const ctx = canvas.getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [
                        {
                            label: 'Weight (kg)',
                            data: hive.Data.map(d => ({ x: d.Time, y: d.Weight })),
                            borderColor: 'rgba(54, 162, 235, 1)',
                            yAxisID: 'weight',
                            tension: 0.1
                        },
                        {
                            label: 'Temperature (°C)',
                            data: hive.Data.map(d => ({ x: d.Time, y: d.Temperature })),
                            borderColor: 'rgba(255, 99, 132, 1)',
                            yAxisID: 'temperature',
                            tension: 0.1
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'hour'
                            }
                        },
                        weight: {
                            type: 'linear',
                            position: 'left',
                            min: hive.WeightMin,
                            max: hive.WeightMax
                        },
                        temperature: {
                            type: 'linear',
                            position: 'right',
                            min: hive.TempMin,
                            max: hive.TempMax
                        }
                    }
                }
            });
        });
    </script>
</div>
</div>