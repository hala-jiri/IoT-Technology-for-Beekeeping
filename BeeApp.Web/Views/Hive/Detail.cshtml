@model BeeApp.Shared.ViewModels.HiveDetailViewModel
@{
    var aggregationOptions = new List<int> { 0, 1, 2, 4, 8 };
}

<h2>Hive: @Model.HiveName</h2>
<p><strong>Apiary:</strong> @Model.ApiaryName (@Model.ApiaryLocation)</p> <!-- TODO: make location working -->

<hr />
<h4>📍 Last measurement of apiary:</h4>
<ul>
    <li><strong>Time:</strong> @Model.LastApiaryMeasurementDate?.ToString("g")</li>
    <li><strong>Temperature:</strong> @Model.LastApiaryTemp?.ToString("F2") °C</li>
    <!--<li><strong>Tlak:</strong> @Model.LastApiaryPressure hPa</li> -->
    <li><strong>Light intensity:</strong> @Model.LastApiaryLight lx</li>
</ul>

<h4>📊 Last measurement of hive:</h4>
<ul>
    <li><strong>Time:</strong> @Model.LastHiveMeasurementDate?.ToString("g")</li>
    <li><strong>Weight:</strong> @Model.LastWeight?.ToString("F2") kg</li>
    <li><strong>Temperature:</strong> @Model.LastHiveTemp?.ToString("F2") °C</li>
</ul>

<h4>🧪 Last inspection</h4>
@if (Model.LastInspection != null)
{
    <ul>
        <li><strong>Date:</strong> @Model.LastInspection.InspectionDate.ToString("g")</li>
        <li><strong>Queen seen:</strong> @(Model.LastInspection.QueenSeen == true ? "✅ Yes" : Model.LastInspection.QueenSeen == false ? "❌ No" : "–")</li>
        <li><strong>Brood:</strong> @(Model.LastInspection.BroodPresent == true ? "✅" : Model.LastInspection.BroodPresent == false ? "❌" : "–")</li>
        <li><strong>Eggs:</strong> @(Model.LastInspection.EggsPresent == true ? "✅" : Model.LastInspection.EggsPresent == false ? "❌" : "–")</li>
        <li><strong>Pollen:</strong> @(Model.LastInspection.PollenPresent == true ? "✅" : Model.LastInspection.PollenPresent == false ? "❌" : "–")</li>
        <li><strong>Honey:</strong> @(Model.LastInspection.HoneyPresent == true ? "✅" : Model.LastInspection.HoneyPresent == false ? "❌" : "–")</li>
        <li><strong>Note:</strong> @Model.LastInspection.Notes</li>
    </ul>
}
else
{
    <p>No inspection yet.</p>
}
<a asp-controller="Inspection" asp-action="Index" asp-route-hiveId="@Model.HiveId" class="btn btn-outline-secondary">
    🧾 Show all inspections
</a>
<p>
    <a asp-controller="Inspection" asp-action="Create" asp-route-hiveId="@Model.HiveId" class="btn btn-outline-success">➕ Add Inspection</a>
</p>

<hr />
<h4>Data Chart</h4>
<div class="btn-group mb-3" role="group">
    <a asp-action="Detail" asp-route-id="@Model.HiveId" asp-route-range="1D" asp-route-aggregationHours="@Model.CurrentAggregation"
       class="btn @(Model.CurrentRange == "1D" ? "btn-primary" : "btn-outline-primary")">Today</a>
    <a asp-action="Detail" asp-route-id="@Model.HiveId" asp-route-range="24h" asp-route-aggregationHours="@Model.CurrentAggregation"
       class="btn @(Model.CurrentRange == "24h" ? "btn-primary" : "btn-outline-primary")">Last 24h</a>
    <a asp-action="Detail" asp-route-id="@Model.HiveId" asp-route-range="7d" asp-route-aggregationHours="@Model.CurrentAggregation"
       class="btn @(Model.CurrentRange == "7d" ? "btn-primary" : "btn-outline-primary")">Last 7 days</a>
    <a asp-action="Detail" asp-route-id="@Model.HiveId" asp-route-range="14d" asp-route-aggregationHours="@Model.CurrentAggregation"
       class="btn @(Model.CurrentRange == "14d" ? "btn-primary" : "btn-outline-primary")">Last 14 days</a>
</div>

<form method="get" asp-action="Detail" class="mb-3">
    <input type="hidden" name="id" value="@Model.HiveId" />
    <input type="hidden" name="range" value="@Model.CurrentRange" />
    <input type="hidden" name="smoothing" value="@Model.CurrentSmoothing" />

    <label for="aggregationHours" class="form-label">Aggregation interval:</label>
    <select class="form-select d-inline w-auto" name="aggregationHours" onchange="this.form.submit()">
        <option value="0" selected="@(Model.CurrentAggregation == 0)">None</option>
        <option value="1" selected="@(Model.CurrentAggregation == 1)">1 hour</option>
        <option value="2" selected="@(Model.CurrentAggregation == 2)">2 hours</option>
        <option value="4" selected="@(Model.CurrentAggregation == 4)">4 hours</option>
        <option value="8" selected="@(Model.CurrentAggregation == 8)">8 hours</option>
    </select>
</form>

<form id="smoothingForm" method="get" asp-action="Detail" class="mb-3">
    <input type="hidden" name="id" value="@Model.HiveId" />
    <input type="hidden" name="range" value="@Model.CurrentRange" />
    <input type="hidden" name="aggregationHours" value="@Model.CurrentAggregation" />
    <input type="hidden" id="smoothingValue" name="smoothing" value="@(Model.CurrentSmoothing.ToString().ToLower())" />

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="smoothingToggle"
               @(Model.CurrentSmoothing ? "checked" : "") />
        <label class="form-check-label" for="smoothingToggle">
            Smooth graph lines
        </label>
    </div>
</form>

<canvas id="hiveChart" width="800" height="400"></canvas>

<!-- GENERATED by AI! not my code -->
@section Scripts {
    <script>
        document.getElementById("smoothingToggle").addEventListener("change", function () {
            const isChecked = this.checked;
            document.getElementById("smoothingValue").value = isChecked;
            document.getElementById("smoothingForm").submit();
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('hiveChart').getContext('2d');
        //const tensionValue = @(Model.CurrentSmoothing ? "0.4" : "0");

        const data = {
            labels: @Html.Raw(Json.Serialize(Model.ChartData.Select(d => d.Date.ToString("yyyy-MM-dd HH:mm")))),
            datasets: [
                {
                    label: 'Weight (kg)',
                    data: @Html.Raw(Json.Serialize(Model.ChartData.Select(d => d.Weight))),
                    borderColor: 'blue',
                    yAxisID: 'y',
                    tension: @(Model.CurrentSmoothing ? "0.4" : "0")
                },
                {
                    label: 'Temperature (°C)',
                    data: @Html.Raw(Json.Serialize(Model.ChartData.Select(d => d.Temperature))),
                    borderColor: 'red',
                    yAxisID: 'y1',
                    tension: @(Model.CurrentSmoothing ? "0.4" : "0") // rounded sharp peaks
                }
            ]
        };

        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                stacked: false,
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Weight (kg)'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        grid: {
                            drawOnChartArea: false
                        },
                        title: {
                            display: true,
                            text: 'Temperature (°C)'
                        }
                    }
                }
            }
        };

        new Chart(ctx, config);
    </script>
}