// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiaryDataCollector.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241230133244_UpdateModelStructure")]
    partial class UpdateModelStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Apiary", b =>
                {
                    b.Property<int>("ApiaryNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiaryNumber"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiaryNumber");

                    b.ToTable("Apiaries");
                });

            modelBuilder.Entity("ApiaryDataCollector.Models.ApiaryMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiaryNumber")
                        .HasColumnType("int");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("LightIntensity")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Temperature")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryNumber");

                    b.ToTable("ApiaryMeasurement");
                });

            modelBuilder.Entity("ApiaryDataCollector.Models.HiveMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HiveNumber")
                        .HasColumnType("int");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HiveNumber");

                    b.ToTable("HiveMeasurement");
                });

            modelBuilder.Entity("ApiaryDataCollector.Models.InspectionReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<bool?>("AdequateFood")
                        .HasColumnType("bit");

                    b.Property<bool?>("BroodPatternGood")
                        .HasColumnType("bit");

                    b.Property<bool?>("HiveClean")
                        .HasColumnType("bit");

                    b.Property<int?>("HiveNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("QueenPresent")
                        .HasColumnType("bit");

                    b.Property<bool?>("SignsOfDisease")
                        .HasColumnType("bit");

                    b.HasKey("ReportId");

                    b.HasIndex("HiveNumber");

                    b.ToTable("InspectionReport");
                });

            modelBuilder.Entity("Hive", b =>
                {
                    b.Property<int>("HiveNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HiveNumber"));

                    b.Property<int?>("ApiaryNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HiveNumber");

                    b.HasIndex("ApiaryNumber");

                    b.ToTable("Hives");
                });

            modelBuilder.Entity("ApiaryDataCollector.Models.ApiaryMeasurement", b =>
                {
                    b.HasOne("Apiary", "Apiary")
                        .WithMany("Measurements")
                        .HasForeignKey("ApiaryNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apiary");
                });

            modelBuilder.Entity("ApiaryDataCollector.Models.HiveMeasurement", b =>
                {
                    b.HasOne("Hive", "Hive")
                        .WithMany("Measurements")
                        .HasForeignKey("HiveNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hive");
                });

            modelBuilder.Entity("ApiaryDataCollector.Models.InspectionReport", b =>
                {
                    b.HasOne("Hive", null)
                        .WithMany("InspectionReports")
                        .HasForeignKey("HiveNumber");
                });

            modelBuilder.Entity("Hive", b =>
                {
                    b.HasOne("Apiary", null)
                        .WithMany("Hives")
                        .HasForeignKey("ApiaryNumber");
                });

            modelBuilder.Entity("Apiary", b =>
                {
                    b.Navigation("Hives");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Hive", b =>
                {
                    b.Navigation("InspectionReports");

                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
